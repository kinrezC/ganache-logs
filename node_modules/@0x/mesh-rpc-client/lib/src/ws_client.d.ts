import { SignedOrder } from '@0x/types';
import { GetStatsResponse, OrderEvent, OrderInfo, ValidationResults, WSOpts } from './types';
/**
 * This class includes all the functionality related to interacting with a Mesh JSON RPC
 * websocket endpoint.
 */
export declare class WSClient {
    private readonly _subscriptionIdToMeshSpecificId;
    private _heartbeatCheckIntervalId;
    private readonly _wsProvider;
    private static _convertRawAcceptedOrderInfos;
    private static _convertRawOrderInfos;
    private static _convertStringifiedContractEvents;
    /**
     * Instantiates a new WSClient instance
     * @param   url               WS server endpoint
     * @param   wsOpts            WebSocket options
     * @return  An instance of WSClient
     */
    constructor(url: string, wsOpts?: WSOpts);
    /**
     * Adds an array of 0x signed orders to the Mesh node.
     * @param signedOrders signedOrders to add
     * @param pinned       Whether or not the orders should be pinned. Pinned
     * orders will not be affected by any DDoS prevention or incentive
     * mechanisms and will always stay in storage until they are no longer
     * fillable.
     * @returns validation results
     */
    addOrdersAsync(signedOrders: SignedOrder[], pinned?: boolean): Promise<ValidationResults>;
    getStatsAsync(): Promise<GetStatsResponse>;
    /**
     * Get all 0x signed orders currently stored in the Mesh node
     * @param perPage number of signedOrders to fetch per paginated request
     * @returns all orders, their hash and their fillableTakerAssetAmount
     */
    getOrdersAsync(perPage?: number): Promise<OrderInfo[]>;
    /**
     * Subscribe to the 'orders' topic and receive order events from Mesh. This method returns a
     * subscriptionId that can be used to `unsubscribe()` from this subscription.
     * @param   cb   callback function where you'd like to get notified about order events
     * @return subscriptionId
     */
    subscribeToOrdersAsync(cb: (orderEvents: OrderEvent[]) => void): Promise<string>;
    /**
     * Unsubscribe from a subscription
     * @param subscriptionId identifier of the subscription to cancel
     */
    unsubscribeAsync(subscriptionId: string): Promise<void>;
    /**
     * Get notified when the underlying WS connection closes normally. If it closes with an
     * error, WSClient automatically attempts to re-connect without emitting a `close` event.
     * @param cb callback to call when WS connection closes
     */
    onClose(cb: () => void): void;
    /**
     * Get notified when a connection to the underlying WS connection is re-established
     * @param cb callback to call with the error when it occurs
     */
    onReconnected(cb: () => void): void;
    /**
     * destroy unsubscribes all active subscriptions, closes the websocket connection
     * and stops the internal heartbeat connection liveness check.
     */
    destroy(): void;
    /**
     * Subscribe to the 'heartbeat' topic and receive an ack from the Mesh every 5 seconds. This method
     * returns a subscriptionId that can be used to `unsubscribe()` from this subscription.
     * @param   cb   callback function where you'd like to get notified about heartbeats
     * @return subscriptionId
     */
    private _subscribeToHeartbeatAsync;
    private _startInternalLivenessCheckAsync;
}
