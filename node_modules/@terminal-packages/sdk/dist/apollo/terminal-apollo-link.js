"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apollo_link_1 = require("apollo-link");
const api_service_1 = require("../shared/api/api-service");
const environment_types_1 = require("../shared/enums/environment-types");
const enums_1 = require("./enums");
class TerminalApolloLink extends apollo_link_1.ApolloLink {
    constructor(_options) {
        super();
        this._options = _options;
        if (!this._options.apiKey) {
            throw new Error('You must supply an API key to the `Provider`');
        }
        if (!this._options.projectId) {
            throw new Error('You must supply a projectId to the `Provider`');
        }
        if (!this._options.source) {
            throw new Error('You must supply a source to the `Provider`');
        }
        if (!this._options.uri || this._options.uri.length === 0) {
            throw new Error('The uri is not defined or is set as a empty string');
        }
        if (this._options.environment &&
            !environment_types_1.EnvironmentTypes[this._options.environment]) {
            throw new Error('You must supply a valid environment type of `dev`, `staging` or `live`. Will default to live if no environment is passed in');
        }
        this._options.environment =
            this._options.environment || environment_types_1.EnvironmentTypes.live;
        this._apiService = new api_service_1.ApiService(this._options.apiKey, this._options.environment);
    }
    /**
     * Watches the GraphQL request made by the ApolloClient
     * @param operation The current GraphQL operation
     * @param forward The next connected ApolloLink context
     */
    request(operation, forward) {
        // Avoid spam on logs due to Apollo dev-tools
        const start = new Date().getTime();
        if (operation.operationName === enums_1.QueryType.IntrospectionQuery) {
            return forward(operation);
        }
        return forward(operation).map((data) => {
            const end = new Date().getTime();
            this._apiService.saveApolloLog({
                result: data,
                method: operation.operationName,
                parameters: Object.entries(operation.variables),
                nodeUrl: this._options.uri,
                source: this._options.source,
                projectId: this._options.projectId,
                isError: Boolean(data.errors),
                responseTimeMs: end - start,
            });
            return data;
        });
    }
}
exports.TerminalApolloLink = TerminalApolloLink;
