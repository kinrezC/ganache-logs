"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("../shared/api/enums");
const utils_1 = require("../shared/utils");
class IpfsApiService {
    constructor(_apiService, _apiUrl, _path, _options) {
        this._apiService = _apiService;
        this._apiUrl = _apiUrl;
        this._path = _path;
        this._options = _options;
    }
    /**
     * Get request on the api url and search
     * @param search The search url
     */
    get(search) {
        return __awaiter(this, void 0, void 0, function* () {
            const ipfsUrl = `${this._apiUrl}${this._path}${search}`;
            let response;
            let isError = false;
            const start = new Date().getTime();
            let end;
            try {
                response = yield this._apiService.get(ipfsUrl);
                end = new Date().getTime();
            }
            catch (error) {
                end = new Date().getTime();
                response = error;
                isError = true;
            }
            const responseTimeMs = end - start;
            try {
                this._apiService.saveIpfsRequestLog({
                    projectId: this._options.projectId,
                    nodeUrl: ipfsUrl,
                    method: this.method(search),
                    httpVerb: enums_1.HttpVerb.GET,
                    parameters: this.parametersFromQuerySearch(`${this._path}${search}`),
                    result: utils_1.Utils.parseDataToString(response),
                    isError,
                    source: this._options.source,
                    responseTimeMs,
                });
            }
            catch (error) {
                // mute error
            }
            if (!isError) {
                return response;
            }
            throw response;
        });
    }
    /**
     * Post request on the api url and path
     * @param endpoint The request endpoint
     * @param body The request body
     * @param options The request options
     */
    post(endpoint, body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const ipfsUrl = `${this._apiUrl}${this._path}${endpoint}`;
            let response;
            let isError = false;
            const start = new Date().getTime();
            let end;
            try {
                response = yield this._apiService.post(ipfsUrl, body, options);
                end = new Date().getTime();
            }
            catch (error) {
                end = new Date().getTime();
                response = error;
                isError = true;
            }
            const responseTimeMs = end - start;
            try {
                this._apiService.saveIpfsRequestLog({
                    projectId: this._options.projectId,
                    nodeUrl: ipfsUrl,
                    method: this.method(endpoint),
                    httpVerb: enums_1.HttpVerb.POST,
                    parameters: this.parametersFromQuerySearch(`${this._path}${endpoint}`),
                    result: utils_1.Utils.parseDataToString(response),
                    isError,
                    source: this._options.source,
                    responseTimeMs,
                    ipfsRequestBody: utils_1.Utils.parseDataToString(body),
                });
            }
            catch (error) {
                // mute error
            }
            if (!isError) {
                return response;
            }
            throw response;
        });
    }
    /**
     * Extract the method from the path and the endpoint
     * @param endpoint The endpoint
     */
    method(endpoint) {
        const fullEndpointPath = `${this._path}${endpoint}`;
        const searchIndexOf = fullEndpointPath.indexOf('?');
        if (searchIndexOf === -1) {
            return fullEndpointPath;
        }
        return fullEndpointPath.substring(0, searchIndexOf);
    }
    /**
     * Get parameters from the query search url
     * @param search The search string
     */
    parametersFromQuerySearch(search) {
        const searchIndexOf = search.indexOf('?');
        if (searchIndexOf === -1) {
            return [];
        }
        return search
            .substring(searchIndexOf)
            .replace('?', '')
            .split('&');
    }
}
exports.IpfsApiService = IpfsApiService;
