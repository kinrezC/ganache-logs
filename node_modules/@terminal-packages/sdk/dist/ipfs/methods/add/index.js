"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../shared/utils");
const ipfs_api_service_1 = require("../../ipfs-api-service");
class Add {
    constructor(apiService, apiUrl, options) {
        this._ipfsApiService = new ipfs_api_service_1.IpfsApiService(apiService, apiUrl, 'add', options);
    }
    /**
     * Add a file or directory to IPFS.
     * @param addPutRequest The add put request
     */
    put(addPutRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const formData = yield utils_1.Utils.getFormData();
            formData.append('file', addPutRequest.fileStringOrBlob);
            let requestPath = '';
            if (addPutRequest.recursive !== undefined) {
                requestPath += `&recursive=${addPutRequest.recursive}`;
            }
            if (addPutRequest.quiet !== undefined) {
                requestPath += `&quiet=${addPutRequest.quiet}`;
            }
            if (addPutRequest.quieter !== undefined) {
                requestPath += `&quieter=${addPutRequest.quieter}`;
            }
            if (addPutRequest.silent !== undefined) {
                requestPath += `&silent=${addPutRequest.silent}`;
            }
            if (addPutRequest.progress !== undefined) {
                requestPath += `&progress=${addPutRequest.progress}`;
            }
            if (addPutRequest.trickle !== undefined) {
                requestPath += `&trickle=${addPutRequest.trickle}`;
            }
            if (addPutRequest.onlyHash !== undefined) {
                requestPath += `&only-hash=${addPutRequest.onlyHash}`;
            }
            if (addPutRequest.wrapWithDirectory !== undefined) {
                requestPath += `&wrap-with-directory=${addPutRequest.wrapWithDirectory}`;
            }
            if (addPutRequest.hidden !== undefined) {
                requestPath += `&hidden=${addPutRequest.hidden}`;
            }
            if (addPutRequest.pin !== undefined) {
                requestPath += `&pin=${addPutRequest.pin}`;
            }
            if (addPutRequest.rawLeaves !== undefined) {
                requestPath += `&raw-leaves=${addPutRequest.rawLeaves}`;
            }
            if (addPutRequest.nocopy !== undefined) {
                requestPath += `&nocopy=${addPutRequest.nocopy}`;
            }
            if (addPutRequest.fscache !== undefined) {
                requestPath += `&fscache=${addPutRequest.fscache}`;
            }
            if (addPutRequest.cidVersion !== undefined) {
                requestPath += `&cid-version=${addPutRequest.cidVersion}`;
            }
            if (addPutRequest.hash) {
                requestPath += `&hash=${addPutRequest.hash}`;
            }
            if (requestPath.length > 0) {
                requestPath = `?${requestPath.substring(1)}`;
            }
            return yield this._ipfsApiService.post(requestPath, formData);
        });
    }
}
exports.Add = Add;
