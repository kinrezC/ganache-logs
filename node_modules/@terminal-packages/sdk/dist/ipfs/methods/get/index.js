"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ipfs_api_service_1 = require("../../ipfs-api-service");
const compression_level_1 = require("./enums/compression-level");
class Get {
    constructor(apiService, apiUrl, options) {
        this._ipfsApiService = new ipfs_api_service_1.IpfsApiService(apiService, apiUrl, 'get', options);
    }
    /**
     * Download IPFS objects
     * @param getRequest The get request payload
     */
    default(getRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            let requestPath = `?arg=${getRequest.arg}`;
            if (getRequest.output) {
                requestPath += `&output=${getRequest.output}`;
            }
            if (getRequest.archive !== undefined) {
                requestPath += `&archive=${getRequest.archive.toString()}`;
            }
            if (getRequest.compress !== undefined) {
                requestPath += `&compress=${getRequest.compress.toString()}`;
            }
            if (getRequest['compression-level'] &&
                compression_level_1.CompressionLevel[getRequest['compression-level']]) {
                requestPath += `&compression-level=${getRequest['compression-level']}`;
            }
            return yield this._ipfsApiService.get(requestPath);
        });
    }
}
exports.Get = Get;
