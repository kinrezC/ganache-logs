"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../shared/utils");
const enums_1 = require("../../enums");
const ipfs_api_service_1 = require("../../ipfs-api-service");
const enums_2 = require("./enums");
class IpfsObject {
    constructor(apiService, apiUrl, options) {
        this._ipfsApiService = new ipfs_api_service_1.IpfsApiService(apiService, apiUrl, 'object/', options);
    }
    /**
     * Output the raw bytes of an IPFS object
     * @param multihash Key of the object to retrieve, in base58-encoded multihash format
     */
    data(multihash) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._ipfsApiService.get(`data?arg=${multihash}`);
        });
    }
    /**
     * Get and serialize the DAG node named by key
     * @param multihash Key of the object to retrieve, in base58-encoded multihash form
     */
    get(multihash) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._ipfsApiService.get(`get?arg=${multihash}`);
        });
    }
    /**
     * Get stats for the DAG node named by key
     * @param multihash Key of the object to retrieve, in base58-encoded multihash form
     */
    stat(multihash) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._ipfsApiService.get(`stat?arg=${multihash}`);
        });
    }
    /**
     * Store input as a DAG object, print its key
     * @param objectPutRequest The object put request
     */
    put(objectPutRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const formData = yield utils_1.Utils.getFormData();
            formData.append('file', objectPutRequest.fileStringOrBlob);
            let requestPath = '';
            if (objectPutRequest.inputEnc && enums_1.InputEnc[objectPutRequest.inputEnc]) {
                requestPath += `&inputenc=${objectPutRequest.inputEnc}`;
            }
            if (objectPutRequest.dataFieldEnc &&
                enums_2.DataFieldEnc[objectPutRequest.dataFieldEnc]) {
                requestPath += `&datafieldenc=${objectPutRequest.dataFieldEnc}`;
            }
            if (objectPutRequest.pin !== undefined) {
                requestPath += `&pin=${objectPutRequest.pin.toString()}`;
            }
            if (requestPath.length > 0) {
                requestPath = `?${requestPath.substring(1)}`;
            }
            return yield this._ipfsApiService.post(`put${requestPath}`, formData);
        });
    }
}
exports.IpfsObject = IpfsObject;
