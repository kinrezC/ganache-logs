import { IAddPutRequest, IAddPutResponse } from './methods/add/models';
import { Block } from './methods/block';
import { Dag } from './methods/dag';
import { IGetRequest } from './methods/get/models/iget-request';
import { IpfsObject } from './methods/object';
import { Pin } from './methods/pin';
import { IVersionRequest, IVersionResponse } from './methods/version/models';
import { ITerminalIpfsOptions } from './models';
export declare class TerminalIpfsClient {
    private _options;
    private _apiService;
    private _add;
    private _block;
    private _cat;
    private _dag;
    private _object;
    private _pin;
    private _version;
    private _get;
    constructor(_options: ITerminalIpfsOptions);
    /**
     * Add a file or directory to IPFS.
     * @param iAddPutRequest The add put request data
     */
    add(iAddPutRequest: IAddPutRequest): Promise<IAddPutResponse>;
    /**
     * Get the block ipfs calls
     */
    readonly block: Block;
    /**
     * Show IPFS object data.
     * @param ipfsObjectHash The IPFS object hash
     */
    cat(ipfsObjectHash: string): Promise<string>;
    /**
     * Get the dag ipfs calls
     */
    readonly dag: Dag;
    /**
     * Get the object ipfs calls
     */
    readonly object: IpfsObject;
    /**
     * Get the pin ipfs calls
     */
    readonly pin: Pin;
    /**
     * Show IPFS version information
     * @param versionRequest The version request payload
     */
    version(versionRequest: IVersionRequest): Promise<IVersionResponse>;
    /**
     * Download IPFS objects
     * @param getRequest The get request payload
     */
    get(getRequest: IGetRequest): Promise<string>;
    /**
     * Build up ipfs url
     */
    private buildUpIpfsUrl;
}
