"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_service_1 = require("../shared/api/api-service");
const environment_types_1 = require("../shared/enums/environment-types");
const add_1 = require("./methods/add");
const block_1 = require("./methods/block");
const cat_1 = require("./methods/cat");
const dag_1 = require("./methods/dag");
const get_1 = require("./methods/get");
const object_1 = require("./methods/object");
const pin_1 = require("./methods/pin");
const version_1 = require("./methods/version");
class TerminalIpfsClient {
    //#endregion
    constructor(_options) {
        this._options = _options;
        if (!this._options.uri) {
            throw new Error('You must supply an `uri`');
        }
        if (!this._options.apiKey) {
            throw new Error('You must supply an `apiKey`');
        }
        if (!this._options.projectId) {
            throw new Error('You must supply an `projectId`');
        }
        if (!this._options.source) {
            throw new Error('You must supply a `source`');
        }
        if (this._options.environment &&
            !environment_types_1.EnvironmentTypes[this._options.environment]) {
            throw new Error('You must supply a valid environment type of `dev`, `staging` or `live`. Will default to live if no environment is passed in');
        }
        this._apiService = new api_service_1.ApiService(this._options.apiKey, this._options.environment || environment_types_1.EnvironmentTypes.live);
    }
    /**
     * Add a file or directory to IPFS.
     * @param iAddPutRequest The add put request data
     */
    add(iAddPutRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._add) {
                this._add = new add_1.Add(this._apiService, this.buildUpIpfsUrl(), this._options);
            }
            return yield this._add.put(iAddPutRequest);
        });
    }
    /**
     * Get the block ipfs calls
     */
    get block() {
        if (this._block) {
            return this._block;
        }
        return (this._block = new block_1.Block(this._apiService, this.buildUpIpfsUrl(), this._options));
    }
    /**
     * Show IPFS object data.
     * @param ipfsObjectHash The IPFS object hash
     */
    cat(ipfsObjectHash) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._cat) {
                this._cat = new cat_1.Cat(this._apiService, this.buildUpIpfsUrl(), this._options);
            }
            return yield this._cat.get(ipfsObjectHash);
        });
    }
    /**
     * Get the dag ipfs calls
     */
    get dag() {
        if (this._dag) {
            return this._dag;
        }
        return (this._dag = new dag_1.Dag(this._apiService, this.buildUpIpfsUrl(), this._options));
    }
    /**
     * Get the object ipfs calls
     */
    get object() {
        if (this._object) {
            return this._object;
        }
        return (this._object = new object_1.IpfsObject(this._apiService, this.buildUpIpfsUrl(), this._options));
    }
    /**
     * Get the pin ipfs calls
     */
    get pin() {
        if (this._pin) {
            return this._pin;
        }
        return (this._pin = new pin_1.Pin(this._apiService, this.buildUpIpfsUrl(), this._options));
    }
    /**
     * Show IPFS version information
     * @param versionRequest The version request payload
     */
    version(versionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._version) {
                this._version = new version_1.Version(this._apiService, this.buildUpIpfsUrl(), this._options);
            }
            return yield this._version.get(versionRequest);
        });
    }
    /**
     * Download IPFS objects
     * @param getRequest The get request payload
     */
    get(getRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._get) {
                this._get = new get_1.Get(this._apiService, this.buildUpIpfsUrl(), this._options);
            }
            return yield this._get.default(getRequest);
        });
    }
    /**
     * Build up ipfs url
     */
    buildUpIpfsUrl() {
        const uri = this._options.uri;
        if (uri.substring(uri.length - 1) === '/') {
            return uri;
        }
        return `${uri}/`;
    }
}
exports.TerminalIpfsClient = TerminalIpfsClient;
