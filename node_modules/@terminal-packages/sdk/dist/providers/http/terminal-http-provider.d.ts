import { TerminalBaseProvider } from '../base/terminal-base-provider';
import { ITerminalHttpProvider } from './iterminal-http-provider';
import { ITerminalCustomHttpProviderOptions } from './models/iterminal-custom-http-provider-options';
import { ITerminalHttpProviderOptions } from './models/iterminal-http-provider-options';
export declare class TerminalHttpProvider extends TerminalBaseProvider implements ITerminalHttpProvider {
    constructor(options: ITerminalCustomHttpProviderOptions | ITerminalHttpProviderOptions);
    /**
     * Supports subsciptions
     */
    supportsSubscriptions(): boolean;
    /**
     * Disconnect (wont be a thing here but its based off the interface)
     */
    disconnect(): boolean;
    /**
     * Gets the provider and makes sure it comes back as `WebsocketProvider` type
     */
    private readonly httpProvider;
    /**
     * Build MetaMask http provider
     */
    private buldMetaMaskHttpProvider;
}
