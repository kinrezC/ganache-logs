"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_providers_1 = require("web3-providers");
const utils_1 = require("../../shared/utils");
const terminal_base_provider_1 = require("../base/terminal-base-provider");
const enums_1 = require("../enums");
class TerminalHttpProvider extends terminal_base_provider_1.TerminalBaseProvider {
    constructor(options) {
        super(enums_1.ProviderType.httpProvider, options.customHttpProvider !==
            undefined, options);
        // @ts-ignore
        if (options.customHttpProvider) {
            if (options.source !== enums_1.SourceType.MetaMask) {
                const customProviderOptions = options;
                this._provider = customProviderOptions.customHttpProvider;
            }
            else {
                this.buldMetaMaskHttpProvider();
            }
        }
        else {
            const basicProviderOptions = options;
            this.host = basicProviderOptions.host;
            if (!this.host || this.host.length === 0) {
                throw new Error('The host is not defined or is set as a empty string');
            }
            this._provider = new web3_providers_1.HttpProvider(this.host, basicProviderOptions.options);
            if (basicProviderOptions.options) {
                this.extraProviderLoggingOptions = {
                    headers: basicProviderOptions.options.headers,
                };
            }
        }
        this.setChainId(this._provider);
        this.connected = true;
    }
    /**
     * Supports subsciptions
     */
    supportsSubscriptions() {
        return this.httpProvider.supportsSubscriptions();
    }
    /**
     * Disconnect (wont be a thing here but its based off the interface)
     */
    disconnect() {
        return this.httpProvider.disconnect();
    }
    /**
     * Gets the provider and makes sure it comes back as `WebsocketProvider` type
     */
    get httpProvider() {
        if (!this._provider) {
            throw new Error('Provider is not set');
        }
        return this._provider;
    }
    /**
     * Build MetaMask http provider
     */
    buldMetaMaskHttpProvider() {
        const _window = utils_1.Utils.getWindow();
        if (!_window) {
            throw new Error('MetaMask provider can only be used on a webapp');
        }
        if (!_window.ethereum) {
            throw new Error('MetaMask is not installed so can not log MetaMask jsonrpc calls');
        }
        // @ts-ignore
        this._provider = {
            send: (method, params) => __awaiter(this, void 0, void 0, function* () {
                const accounts = yield _window.ethereum.enable();
                return new Promise((resolve, reject) => {
                    _window.ethereum.send(
                    // @ts-ignore
                    {
                        method,
                        params,
                        from: accounts[0],
                    }, (error, result) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(result);
                        }
                    });
                });
            }),
            disconnect: () => false,
            supportsSubscriptions: () => false,
        };
    }
}
exports.TerminalHttpProvider = TerminalHttpProvider;
