"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const window_1 = __importDefault(require("../../shared/models/window"));
const source_types_1 = require("../enums/source-types");
const terminal_http_provider_1 = require("../http/terminal-http-provider");
window_1.default.terminal = {
    sdk: {
        metamask: {
            startLogging: (options) => {
                if (!window_1.default.ethereum || !window_1.default.ethereum.isMetaMask) {
                    throw new Error('MetaMask provider has not been injected, this normally means MetaMask is not installed on the extention');
                }
                if (!options || typeof options !== 'object') {
                    throw new Error('Please supply the options object into the MetaMask startLogging');
                }
                // set the ethereum
                window_1.default.terminal.ethereum = new terminal_http_provider_1.TerminalHttpProvider({
                    apiKey: options.apiKey,
                    projectId: options.projectId,
                    source: source_types_1.SourceType.MetaMask,
                    environment: options.environmentType,
                    customHttpProvider: window_1.default.ethereum,
                });
                if (window_1.default.Web3 && window_1.default.web3) {
                    // override the web3 window
                    window_1.default.web3 = new window_1.default.Web3(window_1.default.terminal.ethereum);
                }
            },
        },
    },
    ethereum: undefined,
};
