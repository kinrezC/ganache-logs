"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class MockWebsocketProvider {
    constructor(host, options) {
        this.host = host;
        this.connected = true;
        this.subscriptions = {
            '0x1feed3402dc758727b59bcd23c446d0f': {
                id: '0x00',
                parameters: ['newBlockHeader'],
                subscribeMethod: 'eth_subscribe',
            },
        };
        // tslint:disable-next-line: no-console
        console.log(host, options);
        this.host = host;
    }
    isConnecting() {
        return true;
    }
    supportsSubscriptions() {
        return true;
    }
    registerEventListeners() { }
    send(method, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line: no-console
            console.log(method, parameters);
        });
    }
    sendBatch(methods, moduleInstance) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line: no-console
            console.log(methods, moduleInstance);
            return [];
        });
    }
    subscribe(subscribeMethod, subscriptionMethod, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line: no-console
            console.log(subscribeMethod, subscriptionMethod, parameters);
            return '123';
        });
    }
    unsubscribe(subscriptionId, unsubscribeMethod) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line: no-console
            console.log(subscriptionId, unsubscribeMethod);
            return true;
        });
    }
    clearSubscriptions(unsubscribeMethod) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line: no-console
            console.log(unsubscribeMethod);
            return true;
        });
    }
    on(type, callback) {
        // tslint:disable-next-line: no-console
        console.log(type);
        callback('0x00');
    }
    removeListener(type, callback) {
        // tslint:disable-next-line: no-console
        console.log(type, callback);
    }
    removeAllListeners(type) {
        // tslint:disable-next-line: no-console
        console.log(type);
    }
    reset() { }
    reconnect() { }
    disconnect(code, reason) {
        // tslint:disable-next-line: no-console
        console.log(code, reason);
    }
}
exports.MockWebsocketProvider = MockWebsocketProvider;
