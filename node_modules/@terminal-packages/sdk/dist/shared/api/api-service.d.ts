import { EnvironmentTypes } from '../enums/environment-types';
import { IIpfsLogRequest, IPostRequestOptions, ISaveApolloLogRequest, ISaveLogRequest, ISendAckRequest } from './requests';
export declare class ApiService {
    private _apiKey;
    private _environment;
    private _sessionId;
    constructor(_apiKey: string, _environment: EnvironmentTypes);
    /**
     * Save the json rpc log
     * @param saveLogRequest The save log request
     */
    saveJsonRpcLog(saveLogRequest: ISaveLogRequest): Promise<void>;
    /**
     * Save to logs apollo endpoint
     * @param saveApolloLogRequest The apollo log request
     */
    saveApolloLog(saveApolloLogRequest: ISaveApolloLogRequest): Promise<void>;
    /**
     * Registers a new provider on the integrations page
     * @param providerAck The providerInfo
     */
    sendAck(providerAck: ISendAckRequest): Promise<void>;
    /**
     * Save ipfs log
     * @param request The ipfs log request
     */
    saveIpfsRequestLog(request: IIpfsLogRequest): Promise<void>;
    /**
     * Get request
     * @param url The url
     */
    get<TResult>(url: string): Promise<TResult>;
    /**
     * Post request
     * @param url The url
     * @param body The body
     * @param options The post options
     */
    post<TResult>(url: string, body: any, options?: IPostRequestOptions): Promise<TResult>;
    /**
     * Check if the response content type is applicationJson
     * @param response The fetch response
     */
    private responseContentTypeApplicationJson;
    /**
     * Parse json result or throw json result
     * @param response The fetch response
     */
    private parseJsonResult;
    /**
     * Parse text result or throw text result
     * @param response The fetch response
     */
    private parseTextResult;
    /**
     * get the environment url
     */
    readonly environmentUrl: string;
}
