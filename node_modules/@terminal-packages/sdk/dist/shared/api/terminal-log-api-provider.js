"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const environment_types_1 = require("../enums/environment-types");
const api_service_1 = require("./api-service");
class TerminalLogApiProvider {
    constructor(_options) {
        this._options = _options;
        if (!this._options.apiKey) {
            throw new Error('You must supply an API key');
        }
        if (!this._options.projectId) {
            throw new Error('You must supply a projectId');
        }
        if (this._options.environment &&
            !environment_types_1.EnvironmentTypes[this._options.environment]) {
            throw new Error('You must supply a valid environment type of `dev`, `staging` or `live`. Will default to live if no environment is passed in');
        }
        if (!this._options.environment) {
            this._options.environment = environment_types_1.EnvironmentTypes.live;
        }
        this._apiService = new api_service_1.ApiService(this._options.apiKey, this._options.environment);
    }
    /**
     * Save the json rpc log
     * @param saveLogRequest The save log request
     */
    saveJsonRpcLog(saveLogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._apiService.saveJsonRpcLog(saveLogRequest);
        });
    }
}
exports.TerminalLogApiProvider = TerminalLogApiProvider;
