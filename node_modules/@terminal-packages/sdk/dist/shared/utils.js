"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_utils_1 = require("web3-utils");
class Utils {
    /**
     * Deep clone a object
     * @param object The object
     */
    static deepClone(object) {
        return JSON.parse(JSON.stringify(object));
    }
    /**
     * Get window (will return undefined on all node process as window does not exist)
     */
    static getWindow() {
        if (typeof window === 'undefined') {
            return undefined;
        }
        return window;
    }
    /**
     * Get FormData
     * Will return `form-data` for node and the `window.FormData()` for browsers
     */
    static getFormData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.getWindow() || typeof window.FormData === 'undefined') {
                const formData = yield Promise.resolve().then(() => __importStar(require('form-data')));
                return new formData.default();
            }
            return new FormData();
        });
    }
    /**
     * To checksum address
     * @param address The address
     */
    static toChecksumAddress(address) {
        return web3_utils_1.toChecksumAddress(address);
    }
    /**
     * Parse the jsonrpc result
     * @param result The jsonrpc result
     */
    static parseJsonRPCResult(result) {
        if (!result) {
            return null;
        }
        return Utils.parseDataToString(result);
    }
    /**
     * Parse the data to string
     * @param data The data
     */
    static parseDataToString(data) {
        if (typeof data === 'string') {
            return data;
        }
        if (typeof data === 'object') {
            const deepResultClone = Utils.deepClone(data);
            return JSON.stringify(deepResultClone);
        }
        return data.toString();
    }
    /**
     * Parse data into string array
     * @param data The data
     */
    static parseDataIntoStringArray(data) {
        if (!Array.isArray(data)) {
            data = [data];
        }
        if (Array.isArray(data)) {
            for (let i = 0; i < data.length; i++) {
                if (typeof data[i] === 'object') {
                    data[i] = JSON.stringify(data[i]);
                }
                else {
                    data[i] = String(data[i]);
                }
            }
        }
        return data;
    }
    /**
     * Makes a string unreadable and fills it with `*`
     * @param data The data
     */
    static makeStringUnreadable(data) {
        let unreadable = '';
        for (let i = 0; i < data.length; i++) {
            unreadable += '*';
        }
        return unreadable;
    }
}
exports.Utils = Utils;
Utils.UNKNOWN = 'unknown';
