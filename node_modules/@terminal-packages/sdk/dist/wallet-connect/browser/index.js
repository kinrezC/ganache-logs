"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const browser_1 = __importDefault(require("@walletconnect/browser"));
const api_service_1 = require("../../shared/api/api-service");
const environment_types_1 = require("../../shared/enums/environment-types");
const utils_1 = require("../../shared/utils");
class TerminalWalletConnectBrowserProvider extends browser_1.default {
    constructor(_options) {
        super(_options.walletConnectOptions);
        this._options = _options;
        this._walletConnectInstance = this;
        if (!this._options.apiKey) {
            throw new Error('You must supply an `apiKey`');
        }
        if (!this._options.projectId) {
            throw new Error('You must supply an `projectId`');
        }
        if (this._options.environment &&
            !environment_types_1.EnvironmentTypes[this._options.environment]) {
            throw new Error('You must supply a valid environment type of `dev`, `staging` or `live`. Will default to live if no environment is passed in');
        }
        // overwrite the wallet connect instance
        if (this._options.walletConnectInstance) {
            this._walletConnectInstance = this._options.walletConnectInstance;
        }
        this._apiService = new api_service_1.ApiService(this._options.apiKey, this._options.environment || environment_types_1.EnvironmentTypes.live);
    }
    /**
     * Overwrite the send call request from wallet connect
     * @param payload The payload
     */
    _sendCallRequest(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const start = new Date().getTime();
            let isError = false;
            let result;
            try {
                result = yield this.walletConnectSendCallRequest(payload);
            }
            catch (error) {
                result = error.message;
                isError = true;
            }
            const end = new Date().getTime();
            const logRequest = {
                id: payload.id,
                jsonrpc: payload.jsonrpc,
                nodeUrl: this.getNodeUrl(),
                method: payload.method,
                parameters: utils_1.Utils.parseDataIntoStringArray(payload.params) || [],
                result: utils_1.Utils.parseJsonRPCResult(result),
                source: this.getSource(),
                isError,
                responseTimeMs: end - start,
                chainId: String(this._walletConnectInstance.chainId),
                headers: '[]',
                projectId: this._options.projectId,
                // @ts-ignore
                fromAddress: this._walletConnectInstance._accounts[0],
            };
            this._apiService.saveJsonRpcLog(logRequest);
            return result;
        });
    }
    /**
     * Wallet connect send call request
     * @param payload The payload
     */
    walletConnectSendCallRequest(payload) {
        const _super = Object.create(null, {
            _sendCallRequest: { get: () => super._sendCallRequest }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this._options.walletConnectInstance) {
                // @ts-ignore
                return yield this._walletConnectInstance._sendCallRequest(payload);
            }
            return yield _super._sendCallRequest.call(this, payload);
        });
    }
    /**
     * Get node URL
     */
    getNodeUrl() {
        try {
            // @ts-ignore
            if (this._walletConnectInstance.protocol === 'wc') {
                // @ts-ignore
                return this._walletConnectInstance._transport._socket.url;
            }
            if (this._walletConnectInstance.rpcUrl &&
                this._walletConnectInstance.rpcUrl.length > 0) {
                return this._walletConnectInstance.rpcUrl;
            }
            return utils_1.Utils.UNKNOWN;
        }
        catch (error) {
            return utils_1.Utils.UNKNOWN;
        }
    }
    /**
     * Get the source
     */
    getSource() {
        try {
            if (
            // @ts-ignore
            this._walletConnectInstance._peerMeta &&
                // @ts-ignore
                this._walletConnectInstance._peerMeta.name) {
                // @ts-ignore
                return this._walletConnectInstance._peerMeta.name.replace(/\s/g, '');
            }
            return utils_1.Utils.UNKNOWN;
        }
        catch (error) {
            return utils_1.Utils.UNKNOWN;
        }
    }
}
exports.TerminalWalletConnectBrowserProvider = TerminalWalletConnectBrowserProvider;
