"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const networks_mock_1 = require("../../../web3/providers/http/mocks/networks.mock");
class MockWalletConnectBrowser {
    constructor(opts) {
        this.rpcUrl = networks_mock_1.mockNetworks.rinkeby;
        this.chainId = 4;
        this._accounts = ['0xfD82b1Be6C6A8c3f3483435E9B037d6dFF65B81E'];
        this._peerMeta = { name: 'Trust Wallet' };
        this._transport = { _socket: { url: 'wss://bridge.walletconnect.org/' } };
        // tslint:disable-next-line: no-console
        console.log(this._accounts, this._peerMeta, this._transport, opts);
    }
    _sendCallRequest(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line: no-console
            console.log(payload);
            return '0x30437a3b4ef45bd15ca0a36ec0bc0b76c29c7e9ea45590a1b8f5e4ad8ec23f92';
        });
    }
}
exports.MockWalletConnectBrowser = MockWalletConnectBrowser;
