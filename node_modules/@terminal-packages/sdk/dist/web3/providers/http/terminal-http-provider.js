"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web3_providers_1 = require("web3-providers");
const terminal_base_provider_1 = require("../base/terminal-base-provider");
const enums_1 = require("../enums");
class TerminalHttpProvider extends terminal_base_provider_1.TerminalBaseProvider {
    constructor(options) {
        super(enums_1.ProviderType.httpProvider, options.customHttpProvider !==
            undefined, options);
        // @ts-ignore
        if (options.customHttpProvider) {
            const customProviderOptions = options;
            if (options.host && options.host.length > 0) {
                this.host = options.host;
            }
            this._provider = customProviderOptions.customHttpProvider;
        }
        else {
            const basicProviderOptions = options;
            this.host = basicProviderOptions.host;
            if (!this.host || this.host.length === 0) {
                throw new Error('The host is not defined or is set as a empty string');
            }
            this._provider = new web3_providers_1.HttpProvider(this.host, basicProviderOptions.options);
            if (basicProviderOptions.options) {
                this.extraProviderLoggingOptions = {
                    headers: basicProviderOptions.options.headers,
                };
            }
        }
        this.setChainId(this._provider);
        this.connected = true;
    }
    /**
     * Supports subsciptions
     */
    supportsSubscriptions() {
        return this.httpProvider.supportsSubscriptions();
    }
    /**
     * Disconnect (wont be a thing here but its based off the interface)
     */
    disconnect() {
        return this.httpProvider.disconnect();
    }
    /**
     * Gets the provider and makes sure it comes back as `WebsocketProvider` type
     */
    get httpProvider() {
        if (!this._provider) {
            throw new Error('Provider is not set');
        }
        return this._provider;
    }
}
exports.TerminalHttpProvider = TerminalHttpProvider;
