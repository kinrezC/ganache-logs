import { AbstractWeb3Module } from 'web3-core';
import { AbstractMethod } from 'web3-core-method';
import { WebsocketProviderOptions } from 'web3-providers';
export declare class MockWebsocketProvider {
    host: string;
    connected: boolean;
    subscriptions: {
        '0x1feed3402dc758727b59bcd23c446d0f': {
            id: string;
            parameters: string[];
            subscribeMethod: string;
        };
    };
    constructor(host: string, options?: WebsocketProviderOptions);
    isConnecting(): boolean;
    supportsSubscriptions(): boolean;
    registerEventListeners(): void;
    send(method: string, parameters: any[]): Promise<any>;
    sendBatch(methods: AbstractMethod[], moduleInstance: AbstractWeb3Module): Promise<any[]>;
    subscribe(subscribeMethod: string, subscriptionMethod: string, parameters: any[]): Promise<string>;
    unsubscribe(subscriptionId: string, unsubscribeMethod: string): Promise<boolean>;
    clearSubscriptions(unsubscribeMethod: string): Promise<boolean>;
    on(type: string, callback: (result: any) => void): void;
    removeListener(type: string, callback: () => void): void;
    removeAllListeners(type: string): void;
    reset(): void;
    reconnect(): void;
    disconnect(code: number, reason: string): void;
}
